{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","id","isChecked","listData","setListData","all","completed","active","buttonBorder","setButtonBorder","activeData","setActiveData","completedData","setCompletedData","activeArray","setActiveArray","completedArray","setCompletedArray","inputValue","setInputValue","console","log","handleKeypress","e","charCode","data","find","item","Index","findIndex","Math","floor","random","handleSubmit","removeEventListener","filter","editHandler","toggleChecked","className","placeholder","type","value","onChange","target","changeHandler","onKeyPress","map","i","checked","onClick","CloseOutlined","length","activeListData","completedListData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d79c634d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { CloseOutlined } from '@ant-design/icons';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [listData, setListData] = useState([\r\n    {\r\n      name: \"Piyush\",\r\n      id: 45,\r\n      isChecked: false\r\n    },\r\n    {\r\n      name: \"Raj\",\r\n      id: 33,\r\n      isChecked: false\r\n    }\r\n  ])\r\n  const [buttonBorder, setButtonBorder] = useState({\r\n    all: true,\r\n    completed: false,\r\n    active: false\r\n  })\r\n  const [activeData, setActiveData] = useState([])\r\n  const [completedData, setCompletedData] = useState([])\r\n  const [activeArray, setActiveArray] = useState(false)\r\n  const [completedArray, setCompletedArray] = useState(false)\r\n  const [inputValue, setInputValue] = useState({})\r\n\r\n  const changeHandler = (e) => {\r\n    setInputValue({ ...inputValue, name: e.target.value })\r\n  }\r\n  console.log(\"listData\", listData);\r\n  console.log(\"listData\", inputValue);\r\n  \r\n  const handleSubmit = () => {\r\n    console.log(\"add\");\r\n    if (!inputValue.id) {\r\n      setListData([...listData, { name: inputValue.name, id: Math.floor(Math.random() * 100) + 1 ,isChecked: false}])\r\n      setInputValue({ name: \"\" })\r\n    } else {\r\n      let data = listData.find((item) => item.id === inputValue.id)\r\n      let Index = listData.findIndex((item) => item.id === inputValue.id)\r\n      listData[Index] = { ...data, name: inputValue.name }\r\n      setInputValue({ name: \"\" })\r\n      console.log(listData);\r\n    }\r\n  }\r\n  \r\n  const handleKeypress = e => {\r\n    if (e.charCode === 13) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n  \r\n  const removeEventListener = (id) => {\r\n    let data = listData.filter((item) => item.id !== id)\r\n    setListData(data)\r\n  }\r\n  \r\n  const editHandler = (data) => {\r\n    console.log(\"name\", data);\r\n    setInputValue(data)\r\n    \r\n  }\r\n  \r\n  const toggleChecked = (id) => {\r\n    // debugger\r\n    console.log(\"data+++++++++++\");\r\n    let data = listData.find((item) => item.id === id)\r\n    let Index = listData.findIndex((item) => item.id === id)\r\n    if(listData[Index].isChecked) {\r\n      listData[Index] = { ...data, isChecked: false }\r\n    } else {\r\n      listData[Index] = { ...data, isChecked: true }\r\n    }\r\n    console.log(\"dataaaaaaaa\",listData);\r\n    setListData(listData)\r\n  }\r\n\r\n  const activeListData = () => {\r\n    setButtonBorder({\r\n      all: false,\r\n      completed: false,\r\n      active: true\r\n    });\r\n    const data = listData.filter((item) => item.isChecked !== true)\r\n    console.log(\"data\",data);\r\n    setActiveData(data)\r\n    setCompletedArray(false)\r\n    setActiveArray(true)\r\n  }\r\n  \r\n  const allListData = () => {\r\n    setButtonBorder({\r\n      all: true,\r\n      completed: false,\r\n      active: false\r\n    });\r\n    setActiveArray(false)\r\n    setCompletedArray(false)\r\n  }\r\n  \r\n  const completedListData = () => {\r\n    setButtonBorder({\r\n      all: false,\r\n      completed: true,\r\n      active: false\r\n    });\r\n    const data = listData.filter((item) => item.isChecked === true)\r\n    setCompletedData(data)\r\n    setActiveArray(false)\r\n    setCompletedArray(true)\r\n    console.log(\"datasdasd\",data);\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"boxDiv\">\r\n          <div className=\"row\">\r\n            <h1 className=\"titleName\">Things To Do</h1>\r\n          </div>\r\n          <div className=\"row\">\r\n            <input\r\n              placeholder=\"Add new\"\r\n              type=\"text\"\r\n              className=\"inputStyle\"\r\n              value={inputValue.name}\r\n              onChange={(e) => changeHandler(e)}\r\n              onKeyPress={(e) => handleKeypress(e)} />\r\n          </div>\r\n          <div className=\"row ThirdRow\">\r\n            <ul className=\"ulList\">\r\n              {\r\n               !completedArray && !activeArray ? listData.map((item, i) => {\r\n                  return (\r\n                    <>\r\n                      <li className={`listData ${item.isChecked ? \"completed\" : \"pending\"}`} key={i}>\r\n                       {item.isChecked ? \r\n                       <input type=\"checkbox\" className=\"checkBoxStyle\" \r\n                      checked\r\n                       onChange={() => toggleChecked(item.id)}/>\r\n                       : \r\n                       <input type=\"checkbox\" className=\"checkBoxStyle\" \r\n                       onChange={() => toggleChecked(item.id)}/>}\r\n                        <span className={`listTextStyle`}  onClick={() => editHandler(item)}>{item.name}</span>\r\n                        <CloseOutlined className=\"closeIcon\" onClick={() => removeEventListener(item.id)} />\r\n                      </li>\r\n                      <hr />\r\n                    </>\r\n                  )\r\n                }) \r\n                :\r\n                completedArray ? completedData.map((item, i) => {\r\n                  return (\r\n                    <>\r\n                      <li className=\"listData completed\" key={i}>\r\n                        <input type=\"checkbox\" className=\"checkBoxStyle\" checked={item.isChecked} \r\n                        onChange={() => toggleChecked(item.id)}/>\r\n                        <span className=\"listTextStyle\"  onClick={() => editHandler(item)}>{item.name}</span>\r\n                        <CloseOutlined className=\"closeIcon\" onClick={() => removeEventListener(item.id)} />\r\n                      </li>\r\n                      <hr />\r\n                    </>\r\n                  )\r\n                })\r\n                :\r\n                activeArray &&  activeData.map((item, i) => {\r\n                  return (\r\n                    <>\r\n                      <li className=\"listData pending\" key={i}>\r\n                        <input type=\"checkbox\" className=\"checkBoxStyle\"  \r\n                        onChange={() => toggleChecked(item.id)}/>\r\n                        <span className=\"listTextStyle\"  onClick={() => editHandler(item)}>{item.name}</span>\r\n                        <CloseOutlined className=\"closeIcon\" onClick={() => removeEventListener(item.id)} />\r\n                      </li>\r\n                      <hr />\r\n                    </>\r\n                  )\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container Footer\">\r\n        <ul className=\"ulFooter\">\r\n          <span className=\"footerLengthItem\">Item : {listData.length}</span>\r\n          <li><button className={`FooterButton ${buttonBorder.all ? \"activeButtonBorder\" : \"\"}`} onClick={() => allListData()}>All</button></li>\r\n          <li><button className={`FooterButton ${buttonBorder.active ? \"activeButtonBorder\" : \"\"}`} onClick={() => activeListData()}>Active</button></li>\r\n          <li><button className={`FooterButton ${buttonBorder.completed ? \"activeButtonBorder\" : \"\"}`} onClick={() => completedListData()}>Completed</button></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}